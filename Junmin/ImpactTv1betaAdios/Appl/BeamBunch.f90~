!----------------------------------------------------------------
! (c) Copyright, 2015 by the Regents of the University of California.
! BeamBunchclass: Charged beam bunch class in Beam module of APPLICATION 
!                 layer.
! Version: 1.0-beta
! Author: Ji Qiang, LBNL
! Description: This class defines the charged particle beam bunch 
!              information in the accelerator.
! Comments: 1) 
!----------------------------------------------------------------
      module BeamBunchclass
        use Timerclass
        use PhysConstclass
        use BeamLineElemclass
        use CompDomclass
        use Pgrid2dclass
        use Fldmgerclass
        use Dataclass
        type BeamBunch
!          private
          !beam current, part. mass and charge.
          double precision :: Current,Mass,Charge
          !# of total global macroparticles and local particles
          integer :: Npt,Nptlocal
          !particles type one.
          double precision, pointer, dimension(:,:) :: Pts1
          !reference particle
          double precision, dimension(6) :: refptcl
        end type BeamBunch
      contains
        !//initialize BeamBunch class.
        subroutine construct_BeamBunch(this,incurr,inkin,inmass,incharge,innp,&
                                       phasini)
        implicit none
        include 'mpif.h'
        type (BeamBunch), intent(inout) :: this
        double precision, intent(in) :: incurr,inkin,inmass,&
                                        incharge,phasini
        integer, intent(in) :: innp
        integer :: myid, myidx, myidy,comm2d,commrow,commcol,ierr
        integer :: nptot,nprocrow,nproccol
   
        this%Current = incurr
        this%Mass = inmass
        this%Charge = incharge
        this%Npt = innp

        this%refptcl = phasini
        this%refptcl(6) = -(inkin/this%Mass + 1.0)

        end subroutine construct_BeamBunch

        ! set local # of particles.
        subroutine setnpt_BeamBunch(this,innpt)
        implicit none
        include 'mpif.h'
        integer, intent(in) :: innpt
        type (BeamBunch), intent(inout) :: this

        this%Nptlocal = innpt

        end subroutine setnpt_BeamBunch

        ! get local # of particles.
        subroutine getnpt_BeamBunch(this,outnpt)
        implicit none
        include 'mpif.h'
        type (BeamBunch), intent(in) :: this
        integer, intent(out) :: outnpt

        outnpt = this%Nptlocal

        end subroutine getnpt_BeamBunch

        !//drift half step in positions.
        !//Here, x, y, z are normalized by C * Dt
        !//tau - normalized step size (by Dt).
        !//only particle with z > 0 is drifted.
        !//for particle with z < 0, they are just shifted long z
        !//this is used to simulate the process of emission from
        !//photocathod
        subroutine drifthalf_BeamBunch(this,t,tau,betazini)
        implicit none
        include 'mpif.h'
        type (BeamBunch), intent(inout) :: this
        double precision, intent(inout) :: t
        double precision, intent (in) :: tau,betazini
        double precision :: t0,recpgam
        integer :: i

        call starttime_Timer(t0)

        do i = 1, this%Nptlocal
          !//get 1.0/gamma of each particle
          recpgam = 1.0/sqrt(1.0+this%Pts1(2,i)**2+this%Pts1(4,i)**2+&
                                 this%Pts1(6,i)**2)
          if(this%Pts1(5,i).gt.0.0) then
            this%Pts1(1,i) = this%Pts1(1,i)+0.5*tau*this%Pts1(2,i)*recpgam
            this%Pts1(3,i) = this%Pts1(3,i)+0.5*tau*this%Pts1(4,i)*recpgam
            this%Pts1(5,i) = this%Pts1(5,i)+0.5*tau*this%Pts1(6,i)*recpgam
          else
            this%Pts1(5,i) = this%Pts1(5,i)+0.5*tau*betazini
            !this%Pts1(5,i) = this%Pts1(5,i)+0.5*tau*this%Pts1(6,i)*recpgam
            !the particles inside the wall moving out by the speed of light.
            !this%Pts1(5,i) = this%Pts1(5,i)+0.5*tau
          endif
        enddo

        t_map1 = t_map1 + elapsedtime_Timer(t0)

        end subroutine drifthalf_BeamBunch

        !//drift half step in positions.
        !//Here, x, y, z are normalized by C * Dt
        !//tau - normalized step size (by Dt).
        !//only particle with z > 0 is drifted.
        !//for particle with z < 0, they are just shifted long z
        !//this is used to simulate the process of emission from
        !//photocathod
        subroutine drifthalf121204_BeamBunch(this,t,tau)
        implicit none
        include 'mpif.h'
        type (BeamBunch), intent(inout) :: this
        double precision, intent(inout) :: t
        double precision, intent (in) :: tau
        double precision :: t0,recpgam
        integer :: i

        call starttime_Timer(t0)

        do i = 1, this%Nptlocal
          !//get 1.0/gamma of each particle
          recpgam = 1.0/sqrt(1.0+this%Pts1(2,i)**2+this%Pts1(4,i)**2+&
                                 this%Pts1(6,i)**2)
          if(this%Pts1(5,i).gt.0.0) then
            this%Pts1(1,i) = this%Pts1(1,i)+0.5*tau*this%Pts1(2,i)*recpgam
            this%Pts1(3,i) = this%Pts1(3,i)+0.5*tau*this%Pts1(4,i)*recpgam
            this%Pts1(5,i) = this%Pts1(5,i)+0.5*tau*this%Pts1(6,i)*recpgam
          else
            this%Pts1(5,i) = this%Pts1(5,i)+0.5*tau*this%Pts1(6,i)*recpgam
            !the particles inside the wall moving out by the speed of light.
            !this%Pts1(5,i) = this%Pts1(5,i)+0.5*tau
          endif
        enddo

        t_map1 = t_map1 + elapsedtime_Timer(t0)

        end subroutine drifthalf121204_BeamBunch

        !//drift half step in positions.
        !//Here, x, y, z are normalized by C * Dt
        !//tau - normalized step size (by Dt).
        subroutine drifthalforg_BeamBunch(this,t,tau)
        implicit none
        include 'mpif.h'
        type (BeamBunch), intent(inout) :: this
        double precision, intent(inout) :: t
        double precision, intent (in) :: tau
        double precision :: t0,recpgam
        integer :: i

        call starttime_Timer(t0)

        do i = 1, this%Nptlocal
          !//get 1.0/gamma of each particle
          recpgam = 1.0/sqrt(1.0+this%Pts1(2,i)**2+this%Pts1(4,i)**2+&
                                 this%Pts1(6,i)**2)
          this%Pts1(1,i) = this%Pts1(1,i)+0.5*tau*this%Pts1(2,i)*recpgam
          this%Pts1(3,i) = this%Pts1(3,i)+0.5*tau*this%Pts1(4,i)*recpgam
          this%Pts1(5,i) = this%Pts1(5,i)+0.5*tau*this%Pts1(6,i)*recpgam
        enddo

        t_map1 = t_map1 + elapsedtime_Timer(t0)

        end subroutine drifthalforg_BeamBunch

        !//drift half step in positions with beta*lambda period length
        !//Here, x, y, z are normalized by C * Dt
        !//tau - normalized step size (by Dt).
        subroutine drifthalf2_BeamBunch(this,t,tau,blam,zmin,zmax)
        implicit none
        include 'mpif.h'
        type (BeamBunch), intent(inout) :: this
        double precision, intent(inout) :: t,zmin,zmax
        double precision, intent (in) :: tau,blam
        double precision :: t0,recpgam,sumzlc,sumz
        integer :: i,ierr

        call starttime_Timer(t0)

        sumzlc = 0.0
        do i = 1, this%Nptlocal
          !//get 1.0/gamma of each particle
          recpgam = 1.0/sqrt(1.0+this%Pts1(2,i)**2+this%Pts1(4,i)**2+&
                                 this%Pts1(6,i)**2)
          this%Pts1(1,i) = this%Pts1(1,i)+0.5*tau*this%Pts1(2,i)*recpgam
          this%Pts1(3,i) = this%Pts1(3,i)+0.5*tau*this%Pts1(4,i)*recpgam
          this%Pts1(5,i) = this%Pts1(5,i)+0.5*tau*this%Pts1(6,i)*recpgam
          sumzlc = sumzlc + this%Pts1(5,i)
        enddo

        call MPI_ALLREDUCE(sumzlc,sumz,1,MPI_DOUBLE_PRECISION,MPI_SUM,&
                           MPI_COMM_WORLD,ierr)
        sumz = sumz/this%Npt
        !//periodic longitudinal BC with beta x lambda period.
        zmin = sumz - 0.5*blam
        zmax = sumz + 0.5*blam
        do i = 1, this%Nptlocal
          if(this%Pts1(5,i).lt.zmin) then
             this%Pts1(5,i) = this%Pts1(5,i) + blam
          else if(this%Pts1(5,i).gt.zmax) then
             this%Pts1(5,i) = this%Pts1(5,i) - blam
          else
          endif
        enddo

        t_map1 = t_map1 + elapsedtime_Timer(t0)

        end subroutine drifthalf2_BeamBunch

        !drift all particles along dz
        subroutine driftz_BeamBunch(this,dz)
        implicit none
        include 'mpif.h'
        type (BeamBunch), intent(inout) :: this
        double precision, intent (in) :: dz
        integer :: i

        do i = 1, this%Nptlocal
          this%Pts1(5,i) = this%Pts1(5,i) + dz
        enddo
        
        end subroutine driftz_BeamBunch

        subroutine scatter20t_BeamBunch(innp,rays,&
        tg,chge,mass,dt,beamelem,zbeamelem,idrfile,nbeamln,ibinit,&
        ibend,fldmap,flagerr)
        implicit none
        include 'mpif.h'
        integer, intent(in) :: innp,nbeamln,ibinit,ibend,flagerr
        double precision, intent (inout), dimension(6,innp) :: rays
        double precision, intent (in) :: dt,mass,chge,tg
        type (BeamLineElem), dimension(:), intent(in) :: beamelem
        double precision, dimension(:,:), intent(in) :: zbeamelem
        type (fielddata), dimension(:), intent(in) :: fldmap
        integer, dimension(:,:), intent(in) :: idrfile
        integer :: n,i
        double precision :: t0
        double precision, dimension(4) :: pos
        double precision, dimension(6) :: range, extfld,tmpfld
        double precision :: qmcc,recpgamma,coefLz,&
                            umx,umy,umz,upx,upy,upz,tmp,a1,a2,a3,a4,s1,s2,&
                            s3,ex,ey,ez,bx,by,bz,zz
        integer, dimension(Maxoverlap) :: idbeamln
        integer :: noverlap,nnn

        call starttime_Timer( t0 )

        qmcc = chge/mass
        coefLz = qmcc*Scxlt
    
!        print*,"coefLz: ",coefLz,qmcc,Scxlt,dt,tg
        idbeamln = 1
        do n = 1, innp
          !find which element the particle belongs to.
          zz = rays(5,n)*Scxlt
          !counter how many elements overlaped at given location
          noverlap = 0
          do i = ibinit, ibend
            if( (zz.ge.zbeamelem(1,i)) .and. &
                (zz.le.zbeamelem(2,i)) ) then
               noverlap = noverlap + 1
               idbeamln(noverlap) = i
!               exit
            endif
          enddo
 
          pos(1) = rays(1,n)*Scxlt
          pos(2) = rays(3,n)*Scxlt
          pos(3) = zz
          pos(4) = tg
          !get external field from all overlaped fields at one location
          extfld = 0.0
!          print*,"noverlap: ",noverlap
          if(flagerr.eq.1) then
            do nnn = 1, noverlap
              call getflderrt_BeamLineElem(beamelem(idbeamln(nnn)),pos,&
              tmpfld,fldmap(idrfile(3,idbeamln(nnn))))
              extfld = extfld + tmpfld
            enddo
          else
            do nnn = 1, noverlap
              call getfldt_BeamLineElem(beamelem(idbeamln(nnn)),pos,&
              tmpfld,fldmap(idrfile(3,idbeamln(nnn))))
              extfld = extfld + tmpfld
!            if(nnn.eq.2) then
!              write(16,*)zz,tmpfld(4),tmpfld(5),tmpfld(6)
!            endif
            enddo
          endif

!          print*,"pos...",idbeamln,idrfile(3,idbeamln),pos

!          extfld = 0.0
          ex = extfld(1)
          ey = extfld(2)
          ez = extfld(3)
          bx = extfld(4)
          by = extfld(5)
          bz = extfld(6)
!          ez = 1.0e6

!          print*,pos(3),ex,ey,ez,bx,by,bz,pos(4)
!          write(12,*)pos(3),ex,ey,ez,bx,by,bz,pos(4)
!          call flush_(12)
          !//advance the momenta of particles using implicit central
          !//difference scheme from Birdall and Longdon's book.
          umx = rays(2,n) + coefLz*ex*0.5*dt
          umy = rays(4,n) + coefLz*ey*0.5*dt
          umz = rays(6,n) + coefLz*ez*0.5*dt
          recpgamma = 1.0/sqrt(1.0+umx*umx+umy*umy+umz*umz)
          tmp = 0.5*Clight*dt*recpgamma*coefLz
          a1 = tmp*bx
          a2 = tmp*by
          a3 = tmp*bz
          a4 = 1.0+a1*a1+a2*a2+a3*a3
          s1 = umx + tmp*(umy*bz-umz*by)
          s2 = umy - tmp*(umx*bz-umz*bx)
          s3 = umz + tmp*(umx*by-umy*bx)
          upx = ((1.0+a1*a1)*s1+(a1*a2+a3)*s2+(a1*a3-a2)*s3)/a4
          upy = ((a1*a2-a3)*s1+(1.0+a2*a2)*s2+(a2*a3+a1)*s3)/a4
          upz = ((a1*a3+a2)*s1+(a2*a3-a1)*s2+(1.0+a3*a3)*s3)/a4
          rays(2,n) = upx + coefLz*ex*0.5*dt
          rays(4,n) = upy + coefLz*ey*0.5*dt
          rays(6,n) = upz + coefLz*ez*0.5*dt
        enddo
!        print*,"rays6: ",rays(6,1)

        t_ntrslo = t_ntrslo + elapsedtime_Timer( t0 )

        end subroutine scatter20t_BeamBunch

        !interpolate the space-charge fields E and B in the lab frame
        !to individual particle + external fields.
        subroutine kick2t_BeamBunch(innp,innx,inny,innz,rays,exg,&
        eyg,ezg,bxg,byg,bzg,ptsgeom,npx,npy,myidx,myidy,tg,&
        chge,mass,dt,beamelem,zbeamelem,idrfile,nbeamln,ibinit,ibend,&
        fldmap,flagerr)
        implicit none
        include 'mpif.h'
        integer, intent(in) :: innp,innx,inny,innz,npx,npy,myidx,myidy,&
                              nbeamln,flagerr
        double precision, intent (inout), dimension(6,innp) :: rays
        double precision, intent (in), dimension(innx,inny,innz) :: exg,eyg,ezg 
        double precision, intent (in), dimension(innx,inny,innz) :: bxg,byg,bzg 
        double precision, intent (in) :: dt,mass,chge,tg
        type (BeamLineElem), dimension(:), intent(in) :: beamelem
        double precision, dimension(:,:), intent(in) :: zbeamelem
        integer, dimension(:,:), intent(in) :: idrfile
        type (fielddata), dimension(:), intent(in) :: fldmap
        integer, dimension(2,0:npx-1,0:npy-1) :: table
        integer, dimension(0:npx-1) :: xtable
        integer, dimension(0:npy-1) :: ytable
        double precision :: ab, cd, ef
        integer :: n,i,ii,ibinit,ibend
        double precision :: t0
        double precision :: hx,hxi,hy,hyi,hz,hzi,xmin,ymin,zmin,zmax
        double precision, dimension(3) :: msize
        double precision, dimension(4) :: pos
        double precision, dimension(6) :: range, extfld
        type (CompDom) :: ptsgeom
        integer :: ix,jx,kx,ix1,jx1,kx1,ierr,kadd,jadd
        double precision :: qmcc,recpgamma,coefLz,&
                            umx,umy,umz,upx,upy,upz,tmp,a1,a2,a3,a4,s1,s2,&
                            s3,exn,eyn,ezn,ex,ey,ez,bx,by,bz,zz,bxn,byn
        !for residence correction purpose
        double precision :: dev,frac,frac1,stepsize
        double precision, dimension(6) :: extfld1,extfld2,tmpfld
        double precision, dimension(4) :: pos2
        integer, dimension(Maxoverlap) :: idbeamln 
        integer :: noverlap,nnn
        integer :: ntmp1,ntmp2

        call starttime_Timer( t0 )

        qmcc = chge/mass
        coefLz = qmcc*Scxlt
    
        call getmsize_CompDom(ptsgeom,msize)
        hxi = 1.0/msize(1)
        hyi = 1.0/msize(2)
        hzi = 1.0/msize(3)
        hx = msize(1)
        hy = msize(2)
        hz = msize(3)

        call getrange_CompDom(ptsgeom,range)
        xmin = range(1)
        ymin = range(3)
        zmin = range(5)
        zmax = range(6)

        call getlctabnm_CompDom(ptsgeom,table)
        xtable(0) = 0
        do i = 1, npx - 1
          xtable(i) = xtable(i-1) + table(1,i-1,0)
        enddo

        ytable(0) = 0
        do i = 1, npy - 1
          ytable(i) = ytable(i-1) + table(2,0,i-1)
        enddo

        if(npx.gt.1) then
          kadd = -xtable(myidx) + 1
        else
          kadd = 0
        endif
        if(npy.gt.1) then
          jadd = -ytable(myidy) + 1
        else
          jadd = 0
        endif

        idbeamln = 1

        ntmp1 = 0
        ntmp2 = 0

        do n = 1, innp
          if(rays(5,n)>0) then !//only particles outside the emission plane get accelerated

          ix=(rays(1,n)-xmin)*hxi + 1
          ab=((xmin-rays(1,n))+ix*hx)*hxi
          jx=(rays(3,n)-ymin)*hyi + 1 + jadd
          cd=((ymin-rays(3,n))+(jx-jadd)*hy)*hyi
          kx=(rays(5,n)-zmin)*hzi + 1 + kadd
          ef=((zmin-rays(5,n))+(kx-kadd)*hz)*hzi
        

          ix1 = ix + 1
          if( (ix1.gt.innx).or.(ix.lt.1)) then
            print*,"ix: ",ix,rays(1,n),xmin
            stop
          endif
          jx1 = jx + 1
          if( (jx1.gt.inny).or.(jx.lt.1)) then
            print*,"jx: ",jx,rays(3,n),ymin
            stop
          endif
          kx1 = kx + 1
          if( (kx1.gt.innz).or.(kx.lt.1)) then
            print*,"kx: ",kx,rays(5,n),zmin
            stop
          endif

          exn = (exg(ix,jx,kx)*ab*cd*ef  &
                  +exg(ix,jx1,kx)*ab*(1.-cd)*ef &
                  +exg(ix,jx1,kx1)*ab*(1.-cd)*(1.0-ef) &
                  +exg(ix,jx,kx1)*ab*cd*(1.0-ef) &
                  +exg(ix1,jx,kx1)*(1.0-ab)*cd*(1.0-ef) &
                  +exg(ix1,jx1,kx1)*(1.0-ab)*(1.0-cd)*(1.0-ef)&
                  +exg(ix1,jx1,kx)*(1.0-ab)*(1.0-cd)*ef &
                  +exg(ix1,jx,kx)*(1.0-ab)*cd*ef)

          eyn = (eyg(ix,jx,kx)*ab*cd*ef  &
                  +eyg(ix,jx1,kx)*ab*(1.-cd)*ef &
                  +eyg(ix,jx1,kx1)*ab*(1.-cd)*(1.0-ef) &
                  +eyg(ix,jx,kx1)*ab*cd*(1.0-ef) &
                  +eyg(ix1,jx,kx1)*(1.0-ab)*cd*(1.0-ef) &
                  +eyg(ix1,jx1,kx1)*(1.0-ab)*(1.0-cd)*(1.0-ef)&
                  +eyg(ix1,jx1,kx)*(1.0-ab)*(1.0-cd)*ef &
                  +eyg(ix1,jx,kx)*(1.0-ab)*cd*ef) 

          ezn = ezg(ix,jx,kx)*ab*cd*ef  &
                  +ezg(ix,jx1,kx)*ab*(1.-cd)*ef &
                  +ezg(ix,jx1,kx1)*ab*(1.-cd)*(1.0-ef) &
                  +ezg(ix,jx,kx1)*ab*cd*(1.0-ef) &
                  +ezg(ix1,jx,kx1)*(1.0-ab)*cd*(1.0-ef) &
                  +ezg(ix1,jx1,kx1)*(1.0-ab)*(1.0-cd)*(1.0-ef)&
                  +ezg(ix1,jx1,kx)*(1.0-ab)*(1.0-cd)*ef &
                  +ezg(ix1,jx,kx)*(1.0-ab)*cd*ef

          bxn = bxg(ix,jx,kx)*ab*cd*ef  &
                  +bxg(ix,jx1,kx)*ab*(1.-cd)*ef &
                  +bxg(ix,jx1,kx1)*ab*(1.-cd)*(1.0-ef) &
                  +bxg(ix,jx,kx1)*ab*cd*(1.0-ef) &
                  +bxg(ix1,jx,kx1)*(1.0-ab)*cd*(1.0-ef) &
                  +bxg(ix1,jx1,kx1)*(1.0-ab)*(1.0-cd)*(1.0-ef)&
                  +bxg(ix1,jx1,kx)*(1.0-ab)*(1.0-cd)*ef &
                  +bxg(ix1,jx,kx)*(1.0-ab)*cd*ef

          byn = byg(ix,jx,kx)*ab*cd*ef  &
                  +byg(ix,jx1,kx)*ab*(1.-cd)*ef &
                  +byg(ix,jx1,kx1)*ab*(1.-cd)*(1.0-ef) &
                  +byg(ix,jx,kx1)*ab*cd*(1.0-ef) &
                  +byg(ix1,jx,kx1)*(1.0-ab)*cd*(1.0-ef) &
                  +byg(ix1,jx1,kx1)*(1.0-ab)*(1.0-cd)*(1.0-ef)&
                  +byg(ix1,jx1,kx)*(1.0-ab)*(1.0-cd)*ef &
                  +byg(ix1,jx,kx)*(1.0-ab)*cd*ef

          !find which element the particle belongs to.
          zz = rays(5,n)*Scxlt
          !counter how many elements overlaped at given location
          noverlap = 0
          do i = ibinit, ibend
            if( (zz.ge.zbeamelem(1,i)) .and. &
                (zz.le.zbeamelem(2,i)) ) then
               noverlap = noverlap + 1 
               idbeamln(noverlap) = i
!               exit
            endif
          enddo

          pos(1) = rays(1,n)*Scxlt
          pos(2) = rays(3,n)*Scxlt
          pos(3) = zz
          pos(4) = tg
          !get external field from all overlaped fields at one location
          extfld = 0.0
          if(flagerr.eq.1) then 
            do nnn = 1, noverlap
              call getflderrt_BeamLineElem(beamelem(idbeamln(nnn)),pos,&
              tmpfld,fldmap(idrfile(3,idbeamln(nnn))))
              extfld = extfld + tmpfld
            enddo
          else
            do nnn = 1, noverlap
              call getfldt_BeamLineElem(beamelem(idbeamln(nnn)),pos,&
              tmpfld,fldmap(idrfile(3,idbeamln(nnn))))
              extfld = extfld + tmpfld
            enddo
          endif
!          !for residence correction
! wait until the discussion with Warp people
!          dev = zbeamelem(2,idbeamln)/Scxlt - rays(5,n)
!          recpgamma = 1.0/sqrt(1.0+rays(2,n)**2+rays(4,n)**2+rays(6,n)**2)
!          stepsize = rays(6,n)*recpgamma*dt
!          frac = 2*dev/stepsize !half step
!          if(frac.gt.1.0) then !no need for correction
!            call getfldt_BeamLineElem(beamelem(idbeamln),pos,extfld,fldmap(idrfile(3,idbeamln)))
!          else
!            frac1 = dev/stepsize+0.5
!            call getfldt_BeamLineElem(beamelem(idbeamln),pos,extfld1,fldmap(idrfile(3,idbeamln)))
!            pos2(1) = pos(1)
!            pos2(2) = pos(2)
!            pos2(3) = pos(3) + 0.5*stepsize*Scxlt
!            pos2(4) = pos(4)
!            if(idbeamln.lt.nbeamln) then
!               call getfldt_BeamLineElem(beamelem(idbeamln+1),pos2,&
!               extfld2,fldmap(idrfile(3,idbeamln+1)))
!            else
!               extfld2 = 0.0
!            endif
!            extfld = frac1*extfld1+extfld2*(1.0-frac1)
!          endif

          ex = exn+extfld(1)
          ey = eyn+extfld(2)
          ez = ezn+extfld(3)
          bx = bxn+extfld(4)
          by = byn+extfld(5)
          bz = extfld(6)
! test with no B field from space-charge
!          bx = extfld(4)
!          by = extfld(5)
!          bz = extfld(6)

          !//advance the momenta of particles using implicit central
          !//difference scheme from Birdall and Longdon's book.
          umx = rays(2,n) + coefLz*ex*0.5*dt
          umy = rays(4,n) + coefLz*ey*0.5*dt
          umz = rays(6,n) + coefLz*ez*0.5*dt
          recpgamma = 1.0/sqrt(1.0+umx*umx+umy*umy+umz*umz)
          tmp = 0.5*Clight*dt*recpgamma*coefLz
          a1 = tmp*bx
          a2 = tmp*by
          a3 = tmp*bz
          a4 = 1.0+a1*a1+a2*a2+a3*a3
          s1 = umx + tmp*(umy*bz-umz*by)
          s2 = umy - tmp*(umx*bz-umz*bx)
          s3 = umz + tmp*(umx*by-umy*bx)
          upx = ((1.0+a1*a1)*s1+(a1*a2+a3)*s2+(a1*a3-a2)*s3)/a4
          upy = ((a1*a2-a3)*s1+(1.0+a2*a2)*s2+(a2*a3+a1)*s3)/a4
          upz = ((a1*a3+a2)*s1+(a2*a3-a1)*s2+(1.0+a3*a3)*s3)/a4
          rays(2,n) = upx + coefLz*ex*0.5*dt
          rays(4,n) = upy + coefLz*ey*0.5*dt
          rays(6,n) = upz + coefLz*ez*0.5*dt

!          ntmp1 = ntmp1 + 1
!          if(rays(6,n).lt.0.0) then
!            !print*,"rays: ",n,rays(5,n),rays(6,n),upz,ezn,extfld(3)
!            ntmp2 = ntmp2 + 1
!          endif

          endif
        enddo

!        print*,"ntmp1, ",ntmp1,ntmp2,myidx,myidy
        t_ntrslo = t_ntrslo + elapsedtime_Timer( t0 )

        end subroutine kick2t_BeamBunch

        !check the particles outside the computational domain for each bunch/bin
        subroutine lost_BeamBunch(this,xrad,yrad,zleng,zcent,nplc,nptot)
        implicit none
        include 'mpif.h'
        type (BeamBunch), intent(inout) :: this
        double precision, intent(in) :: xrad,yrad,zleng,zcent
        integer, intent(out) :: nplc,nptot
        integer :: i
        integer :: ilost,i0,ierr
        double precision, dimension(6) :: ptrange
        double precision :: rr,rrap
 
        ptrange(1) = -xrad/Scxlt
        ptrange(2) = xrad/Scxlt
        ptrange(3) = -yrad/Scxlt
        ptrange(4) = yrad/Scxlt
        !ptrange(5) = zcent-0.5*zleng/Scxlt
        !ptrange(6) = zcent+0.5*zleng/Scxlt
        ptrange(5) = 0.0
        ptrange(6) = zleng/Scxlt
        rrap = ptrange(1)**2 
        ilost = 0
        do i0 = 1, this%Nptlocal
          i = i0 - ilost
          this%Pts1(1,i) = this%Pts1(1,i0)
          this%Pts1(2,i) = this%Pts1(2,i0)
          this%Pts1(3,i) = this%Pts1(3,i0)
          this%Pts1(4,i) = this%Pts1(4,i0)
          this%Pts1(5,i) = this%Pts1(5,i0)
          this%Pts1(6,i) = this%Pts1(6,i0)
          rr = this%Pts1(1,i0)**2+this%Pts1(3,i0)**2
          if(rr.ge.rrap) then
            ilost = ilost + 1
          else if(this%Pts1(1,i0).le.ptrange(1)) then
            ilost = ilost + 1
          else if(this%Pts1(1,i0).ge.ptrange(2)) then
            ilost = ilost + 1
          else if(this%Pts1(3,i0).le.ptrange(3)) then
            ilost = ilost + 1
          else if(this%Pts1(3,i0).ge.ptrange(4)) then
            ilost = ilost + 1
          else if(this%Pts1(5,i0).le.ptrange(5) .and. &
                  this%Pts1(6,i0).lt.0.0) then
            ilost = ilost + 1
          else if(this%Pts1(5,i0).ge.ptrange(6)) then
            ilost = ilost + 1
!          else if(this%Pts1(6,i0).lt.0.0) then !this does not allow particles move in negative direction
!            ilost = ilost + 1
          else
          endif
        enddo
        do i = this%Nptlocal - ilost + 1, this%Nptlocal
          this%Pts1(1,i) = 0.0
          this%Pts1(2,i) = 0.0
          this%Pts1(3,i) = 0.0
          this%Pts1(4,i) = 0.0
          this%Pts1(5,i) = -1.0e5
          this%Pts1(6,i) = 0.0
        enddo

        if (this%Nptlocal .eq. ilost) then
           print *, "Nptlocal=", this%Nptlocal, "ilost=", ilost
        end if

        this%Nptlocal = this%Nptlocal - ilost
        nplc = this%Nptlocal
        call MPI_ALLREDUCE(nplc,nptot,1,MPI_INTEGER,&
                           MPI_SUM,MPI_COMM_WORLD,ierr)
        this%Current = this%Current*nptot/this%Npt
        this%Npt = nptot
 
        end subroutine lost_BeamBunch

        !//drift half step in positions.
        !//Here, x, y, z are normalized by C * Dt
        !//tau - normalized step size (by Dt).
        !//the time "t" is normalized by the scaling frequency.
        subroutine driftbackhalf_BeamBunch(this,t,tau)
        implicit none
        include 'mpif.h'
        type (BeamBunch), intent(inout) :: this
        double precision, intent(inout) :: t
        double precision, intent (in) :: tau
        double precision :: xl,pz
        double precision :: t0,recpgam
        integer :: i
 
        call starttime_Timer(t0)
 
        do i = 1, this%Nptlocal
          !//get 1.0/gamma of each particle
          recpgam = 1.0/sqrt(1.0+this%Pts1(2,i)**2+this%Pts1(4,i)**2+&
                                 this%Pts1(6,i)**2)
          this%Pts1(1,i) = this%Pts1(1,i)-0.5*tau*this%Pts1(2,i)*recpgam
          this%Pts1(3,i) = this%Pts1(3,i)-0.5*tau*this%Pts1(4,i)*recpgam
          this%Pts1(5,i) = this%Pts1(5,i)-0.5*tau*this%Pts1(6,i)*recpgam
        enddo
        recpgam = 1.0/sqrt(1.0+this%refptcl(2)**2+this%refptcl(4)**2+&
                           this%refptcl(6)**2)
        this%refptcl(1) = this%refptcl(1)-0.5*tau*this%refptcl(2)*recpgam
        this%refptcl(3) = this%refptcl(3)-0.5*tau*this%refptcl(4)*recpgam
        this%refptcl(5) = this%refptcl(5)-0.5*tau*this%refptcl(6)*recpgam
 
        t_map1 = t_map1 + elapsedtime_Timer(t0)
 
        end subroutine driftbackhalf_BeamBunch

        !//release all the memory held by BeamBunch.
        subroutine destruct_BeamBunch(this)
        implicit none
        include 'mpif.h'
        type (BeamBunch), intent(out) :: this

        deallocate(this%Pts1)

        end subroutine destruct_BeamBunch

      end module BeamBunchclass
